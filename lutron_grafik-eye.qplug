-- Lutron GRAFIK_EYE
-- by Patrick Gilligan
-- November 2021 

-- Information block for the plugin
PluginInfo = {
  Name = "Lutron QSE-NWK-E 2021",
  Version = "1.0",
  BuildVersion = "1.0.10.0",
  Id = "ea45d683-b68f-4886-a1cb-72a059a86e09",
  Author = "PatrickGilligan",
  Description = "Controls a Lutron GrafikEye TCP Lighting Dimmer",
  ShowDebug = false
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return { 51,51,51 }
end

--GetProperies() function is needed
function GetProperties()
  props = {}
  return props
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Lutron GRAFIK_EYE, version " .. PluginInfo.Version
end

-- Defines the Controls used within the plugin
function GetControls(props)
  ctrls = {}
  table.insert(ctrls, { 
    Name = "Ipa",
    ControlType = "Text",
    Count = 1,
    UserPin = false
  })
  table.insert(ctrls, { 
    Name = "PortNum",
    ControlType = "Text",
    Count = 1,
    UserPin = false
  })
  table.insert(ctrls, { 
    Name = "Login",
    ControlType = "Text",
    Count = 1,
    UserPin = false
  })
  table.insert(ctrls, {
    Name = "Trigger",
    ControlType = "Button",
    ButtonType = "Trigger",
    Count = 1,
    UserPin = false
  })
  table.insert(ctrls, { 
    Name = "Clear",
    ControlType = "Button",
    Count = 1,
    UserPin = false
  })
  table.insert(ctrls, { 
    Name = "Command",
    ControlType = "Text",
    Count = 1,
    UserPin = false
  })
  table.insert(ctrls, { -- just copy pasted, need to change for next controls
    Name = "FbBox",
    ControlType = "Text",
    Count = 1,
    UserPin = false
  })
  table.insert(ctrls, { 
    Name = "ExtRead",
    ControlType = "Text",
    Count = 1,
    UserPin = false
    })
  table.insert(ctrls, { 
    Name = "ExtWrite",
    ControlType = "Text",
    Count = 1,
    UserPin = false
    })
  table.insert(ctrls, { 
    Name = "Fader",
    ControlType = "Knob",
    ControlUnit = "Percent",
    Max = 100,
    Min = 1,
    Count = 1,
    UserPin = false
    })
  table.insert(ctrls, { 
    Name = "IidNum",
    ControlType = "Text",
    Count = 1,
    UserPin = false
    })
  table.insert(ctrls, { 
    Name = "OutNum",
    ControlType = "Text",
    Count = 1,
    UserPin = false
    })
  table.insert(ctrls, { 
    Name = "Btn1IidNum",
    ControlType = "Text",
    Count = 1,
    UserPin = false
    })
  table.insert(ctrls, { 
    Name = "TestBtn1",
    ControlType = "Button",
    Count = 1,
    UserPin = false
    })
  table.insert(ctrls, { 
    Name = "TestBtn2",
    ControlType = "Button",
    Count = 1,
    UserPin = false
    })
    --[[
  table.insert(ctrls, { 
    Name = "Btn2IidNum",
    ControlType = "Text",
    Count = 1,
    UserPin = false
    })
    ]]--
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  --this is the big group box
  table.insert(graphics,{
    Type = "GroupBox",
    Text = "Lutron GRAFIK Eye 2021",
    Fill = {105,105,105},
    StrokeWidth = 1,
    Position = {1,1},
    Size = {893,287},
    HTextAlign = "Center" 
  })
  
  --this is the logo
  Logo = ""
  
  table.insert(graphics,{
    Type = "Image",
    Image = Logo,
    Position = {6,27},
    Size = {162,106}
  })
  
  --These are all the smaller group boxes
  table.insert(graphics,{
    Type = "GroupBox",
    Text = "Connection Info",
    Fill = {157,156,156},
    StrokeWidth = 1,
    Position = {6,133},
    Size = {162,147},
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "GroupBox",
    Text = "Discreet Commands",
    Fill = {157,156,156},
    StrokeWidth = 1,
    Position = {168,27},
    Size = {312,253},
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "GroupBox",
    Text = "External Tx and Rx",
    Fill = {157,156,156},
    StrokeWidth = 1,
    Position = {480,27},
    Size = {183,253},
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "GroupBox",
    Text = "Fader",
    Fill = {157,156,156},
    StrokeWidth = 1,
    Position = {663,27},
    Size = {97,253},
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "GroupBox",
    Text = "Shades",
    Fill = {157,156,156},
    StrokeWidth = 1,
    Position = {760,27},
    Size = {123,253},
    HTextAlign = "Center"
  })
  
  --These are all the text boxes
  table.insert(graphics,{
    Type = "Text",
    Text = "IP",
    Position = {31,165},
    Size = {36,21},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Port",
    Position = {23,199},
    Size = {44,21},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Login",
    Position = {23,243},
    Size = {44,21},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Trigger Command",
    Position = {182,52},
    Size = {108,21},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Clear Feedback",
    Position = {360,52},
    Size = {108,21},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Command to Send",
    Position = {182,112},
    Size = {286,21},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Command Feedback",
    Position = {182,149},
    Size = {286,21},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "External Read",
    Position = {496,52},
    Size = {151,20},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "External Write",
    Position = {496,128},
    Size = {151,21},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Integration ID:",
    Position = {664,170},
    Size = {96,21},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Output Number",
    Position = {664,208},
    Size = {96,31},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Integration ID:",
    Position = {779,52},
    Size = {82,18},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Shades Up",
    Position = {778,116},
    Size = {88,21},
    FontSize = 12,
    HTextAlign = "Center"
  })
  table.insert(graphics,{
    Type = "Text",
    Text = "Shades Down",
    Position = {778,191},
    Size = {83,21},
    FontSize = 12,
    HTextAlign = "Center"
  })
  
  --These are all the controls
  layout["Ipa"] = {
    PrettyName = "IP Address",
    Style = "Textbox",
    Position = {67,165},
    Size = {83,16},
    Color = {255,255,255} 
  }
  layout["PortNum"] = {
    PrettyName = "Port Number",
    Style = "Textbox",
    Position = {67,204},
    Size = {83,16},
    Color = {255,255,255} 
  }
  layout["Login"] = {
    PrettyName = "Login",
    Style = "Textbox",
    Position = {67,243},
    Size = {83,16},
    Color = {255,255,255} 
  }
  layout["Trigger"] = {
    PrettyName = "Trigger Command",
    Style = "Button",
    Position = {182,73},
    Size = {108,25},
    Color = {124,124,124} 
  }
  layout["Clear"] = {
    PrettyName = "Clear Feedback",
    Style = "Button",
    Position = {360,73},
    Size = {108,25},
    Color = {124,124,124} 
  }
  layout["Command"] = {
    PrettyName = "Command to Send",
    Style = "Textbox",
    Position = {182,133},
    Size = {286,16},
    Color = {255,255,255} 
  }
  layout["FbBox"] = {
    PrettyName = "Command Feedback",
    Style = "Textbox",
    Position = {182,170},
    Size = {283,106},
    Color = {255,255,255} 
  }
  layout["ExtRead"] = {
    PrettyName = "External Read",
    Style = "Textbox",
    Position = {496,72},
    Size = {151,53},
    Color = {255,255,255} 
  }
  layout["ExtWrite"] = {
    PrettyName = "External Write",
    Style = "Textbox",
    Position = {496,149},
    Size = {151,53},
    Color = {255,255,255} 
  }
  layout["Fader"] = {
    PrettyName = "Fader",
    Style = "Fader",
    FaderStyle = "Classic",
    Position = {694,48},
    Size = {36,128},
    Color = {242,137,174}
  }
  layout["IidNum"] = {
    PrettyName = "Integration ID",
    Style = "Textbox",
    Position = {676,191},
    Size = {74,14},
    Color = {255,255,255} 
  }
  layout["OutNum"] = {
    PrettyName = "Output Number",
    Style = "Textbox",
    Position = {676,230},
    Size = {74,14},
    Color = {255,255,255}
  }
  layout["Btn1IidNum"] = {
    PrettyName = "Integration ID",
    Style = "Textbox",
    Position = {778,70},
    Size = {88,33},
    Color = {255,255,255} 
  }
  layout["TestBtn1"] = {
    PrettyName = "Shades Up",
    Style = "Button",
    Position = {778,137},
    Size = {88,33},
    Color = {124,124,124} 
  }
  layout["TestBtn2"] = {
    PrettyName = "Shades Down",
    Style = "Button",
    Position = {778,212},
    Size = {88,33},
    Color = {124,124,124} 
  }
  return layout, graphics
end

--Start event based logic
if Controls then
  --Copy paste from the Lua plugin - --Lutron QSE-NWK-E (GRAFIK Eye) Control Plug-in
  
  --Main variables
  Address = Controls.Ipa.String
  Port = tonumber(Controls.PortNum.String)
  Cmd = Controls.Command.String..'\x0d\x0a'
  CmdBox = Controls.Command.String
  Sock = TcpSocket.New()
  Login = Controls.Login.String
  
  --Secondary variables
  Iid = Controls.IidNum.String
  Output = Controls.OutNum.String
  Iidlen = string.len(Iid)
  OutputLen = string.gsub(string.len(Output), "%s+", "")
  Btn1Iid = Controls.Btn1IidNum.String
  --Btn2Iid = Controls.Btn2IidNum.String
  SubI = (14 + Iidlen + OutputLen)
  SubJ = (SubI + 4)
  
  --Timeout utilities
  Sock.ReadTimeout = 0
  Sock.WriteTimeout = 0
  Sock.ReconnectTimeout = 5
  
  --Connection/Command basics
  Sock.Connected = function(Sock)
    print("TCP Socket is connected")
  end
  Sock.Reconnect = function(Sock)
    print("TCP Socket is reconnecting")
  end
  Sock.Closed = function(Sock)
    print("TCP Socket was closed by the remote end")
  end
  Sock.Error = function(Sock, err)
    print("TCP Socket had an error:",err)
  end
  Sock.Timeout = function(Sock, err)
    print("TCP Socket timed out",err)
  end
  
  --Basic EventHandlers
  Controls.Trigger.EventHandler = function()
    Sock:Write(Cmd) 
  end
  Controls.Clear.EventHandler = function() 
    Controls.FbBox.String = ""
    end
  Controls.Command.EventHandler = function()
    if Cmd ~= nil then
      Cmd = CmdBox
      print(Cmd)
    end
  end
      
  --Dynamic ip and Port update reconnection  
  Controls.Ipa.EventHandler = function()
    Reconnect()
  end
  Controls.PortNum.EventHandler = function()
    Reconnect()
  end
  
  
  --Incoming data pipeline
  Sock.Data = function()
    Fb = Sock:Read(Sock.BufferLength)
    Fbstr = string.sub(Fb, SubI, SubJ)
    Fbnum = tonumber(Fbstr) 
      -- functions to call
      FbBoxx()  
      IntenseBoxx()
      Timer.CallAfter(keepAlive,0.5)
      Timer.CallAfter(FaderFb,2)
      Btn1Fb()
      Btn2Fb()
      ExtTx()
  end
  
  --External Script Communication
  ExtRx = function() 
    local Rx = Controls.ExtRead.String
    if Rx ~= nil then
      Sock:Write(Rx)
      CmdBox = Rx
    end
  end  
  Controls.ExtRead.EventHandler = function()
    ExtRx()
  end
  ExtTx = function()
    if Fb ~= nil then
      Controls.ExtWrite.String = Fb
    end
  end
  Controls.ExtWrite.EventHandler = function()
    ExtTx()
  end
     
  --Box readout functions
  Controls.Ipa.EventHandler = function()
    if Address ~= nil then
      Ipa = Address
    end
    print("Ip Address changed to "..Ipa)
  end  
  Controls.PortNum.EventHandler = function()
    if Controls.PortNum.String ~= nil then
      Port = tonumber(Controls.PortNum.String)
      print("Port changed to "..Port) 
    end
  end 
  function FbBoxx()
    if Fb ~= nil then
      Controls.FbBox.String = Fb
      print(Fb)
      end
  end
  Controls.IidNum.EventHandler = function()
    if Controls.IidNum.String ~= nil then
      Iid = Controls.IidNum.String
      end
    print("Iid changed to "..Iid)
  end
  Controls.OutNum.EventHandler = function()
    if Controls.OutNum.String ~= nil then
      Output = Controls.OutNum.String
      end
    print("Output number changed to "..Output)
  end
  function IntenseBoxx()
    if Fbstr ~= nil then
      Controls.Intensity.String = Fbstr
      end
  end 
  Controls.Btn1IidNum.EventHandler = function()
    if Controls.Btn1IidNum.String ~= nil then
      Btn1Iid = Controls.Btn1IidNum.String
    end
    Btn1Fb()
  end
  --[[ 
    --I'm keeping this to just one iid number for both buttons in the plugin version
  Controls.Btn2IidNum.EventHandler = function()
    if Controls.Btn2IidNum.String ~= nil then
      Btn1Iid = Controls.Btn2IidNum.String
    end
    Btn2Fb()
  end
  ]]--
  
  -- Connect, disconnect, reconnect, keep alive
  function IPConnect()
    if Address ~= "" and Port ~= "" then
      Sock:Connect(Address,Port)
    end
  end
  function IPDisconnect()
    Sock:Disconnect()
    print("TCP IP Connection has been closed locally")
  end
  function Reconnect()
    IPDisconnect()
    Timer.CallAfter(IPConnect, 0.5) 
  end 
  function keepAlive()
    if Fb ~= nil and string.find(Fb,'login:') then
      print("Login prompt")
      Sock:Write(Login.."\x0d\x0a")
      end
    end
    IPConnect()
    
  -- Dynamic ip and Port update reconnection  
  Controls.Ipa.EventHandler = function()
    Reconnect()
  end
  Controls.PortNum.EventHandler = function()
    Reconnect()
  end
  
  --Fader control
  Controls.Fader.EventHandler = function()
    if Controls.Fader.Value ~= nil then
      Faderpos = string.sub(Controls.Fader.Value,0,4)
    end
    --Timer.CallAfter(Faderwait,0.5)
  end
  --[[
  Faderwait = function()
    if Faderpos == Controls.Fader.Value then
      Sock:Write('#DEVICE,'..Iid..','..Output..',14,'..Faderpos..'\x0d\x0a')
      Cmd = '#DEVICE,'..Iid..','..Output..',14,'..string.sub(Controls.Fader.Value,0,4)  
    else
        Faderpos = string.sub(Controls.Fader.Value,0,4)
        Sock:Write('#DEVICE,'..Iid..','..Output..',14,'..Faderpos..'\x0d\x0a')
        Cmd = '#DEVICE,'..Iid..','..Output..',14,'..string.sub(Controls.Fader.Value,0,4)
        print("wasnt matched")
      end
  end
  ]]--
  --Dynamic feedback for testing Fader
  FaderFb = function()
    if string.find(Fb,'~DEVICE,'..Iid..','..Output..',14') then
      Controls.Fader.Value = Fbnum
      end
    end
  
  --Shade buttons
  Controls.TestBtn1.EventHandler = function()
    if Controls.TestBtn1.Boolean then
      Sock:Write('#DEVICE,'..Btn1Iid..',0,14,100.00\x0d\x0a')
      Btn1Fb()
        else Sock:Write('#DEVICE,'..Btn1Iid..',0,14,0.00\x0d\x0a')
          print("test1 down")
          Btn1Fb()
    end
  end
  Controls.TestBtn2.EventHandler = function()
    if Controls.TestBtn2.Boolean then
      Sock:Write('#DEVICE,'..Btn1Iid..',0,14,100.00\x0d\x0a')
      Btn2Fb()
      print("test2 up")
        else Sock:Write('#DEVICE,'..Btn1Iid..',0,14,0.00\x0d\x0a')
        print("test2 down")
        Btn2Fb()
    end
  end
  
  --Dynamic Feedback for shade buttons
  Btn1Fb = function()
    if string.find(Fb,'~DEVICE,'..Btn1Iid..',0,14,100.00') then
      Controls.TestBtn1.Color = "Green"
      Controls.TestBtn1.Legend = "Shades are up"
        else if string.find(Fb,'~DEVICE,'..Btn1Iid..',0,14,0.00') then
          Controls.TestBtn1.Color = "Red"
          Controls.TestBtn1.Legend = "Shades are down"
          end
      end
  end
  Btn2Fb = function()
    if string.find(Fb,'~DEVICE,'..Btn1Iid..',0,14,100.00') then
      Controls.TestBtn2.Color = "Green"
      Controls.TestBtn2.Legend = "Shades are up"
        else if string.find(Fb,'~DEVICE,'..Btn1Iid..',0,14,0.00') then
          Controls.TestBtn2.Color = "Red"
          Controls.TestBtn2.Legend = "Shades are down"
        end
    end
  end
  
  --Opens connection
  function IPConnect()
    if Address ~= "" and Port ~= "" then
      Sock:Connect(Address, Port)
        else print("Please add IP and Port information")
    end
  end
end
